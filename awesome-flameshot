#!/bin/bash

# =============================================

_SCREENSHOT_DIR_=$HOME/Pictures/Flameshot
_RAW_=$(date '+Screenshot_%y_%m_%d_%H_%M_%S.png')
_RESDIR_="Result"
_RAWIMG_="$_SCREENSHOT_DIR_/$_RAW_"
_LOG_FILE_="$_SCREENSHOT_DIR_/.awesome-flameshot.log"


_FG_COLOR_='#ffffff'
_BG_COLOR_='lightgray'
_BG_SIZE_=3

# Border Size Applied when value greater than or equal 3
_BORDER_SIZE_=3
_SHADOW_SIZE_='90x10+0+10'  # [ weight ] x [ radius ] + [ horizontal ] x [ vertical ]
_ROUNDED_CORNER_=7

_AUTHOR_POST_=( 'South' '+0+20' )
_AUTHOR_NAME_="  $USER  $(date '+   %d.%m.%y     %H:%M')"
_AUTHOR_COLOR_='#000000'

# Get Lists Font With "convert -list font | grep -iE 'font:.*' | nl"
_FONT_SIZE_=12
_FONT_='JetBrains-Mono-Medium-Medium-Nerd-Font-Complete'

# List of Colors
Light_Red="\033[1;31m"
Light_Green="\033[1;32m"
Yellow="\033[1;33m"
Light_Blue="\033[1;34m"
Light_Purple="\033[1;35m"
Light_Cyan="\033[1;36m"
NoColor="\033[0m"

# =============================================



function check() {

    if ! [[ $? -eq 0 && ${PIPESTATUS[0]} -eq 0 ]]; then

        rm $_RAWIMG_

        notify-send -u critical -t 3000 "[ ERROR ]  Awesome-Flameshot : $_LOG_FILE_" >> $_LOG_FILE_ 2>&1
        exit 1
    fi
}

function get_latest_img() { 

    _LATEST_IMAGE_=$(/bin/ls -th $_SCREENSHOT_DIR_ | grep $_RAW_)

    if [[ $( echo "$_LATEST_IMAGE_" | wc -w ) -eq 0 ]]; then
        exit 1
    else
        _LATEST_IMAGE_="$_SCREENSHOT_DIR_/$_LATEST_IMAGE_"
    fi
}

function convert() {

    _target_file_=$( echo "$_LATEST_IMAGE_" | sed 's/.png/.edited.png/g'  )

    if [[ $_BORDER_SIZE_ -ge 3 ]]; then
        magick convert "$_LATEST_IMAGE_" \
            -format 'roundrectangle 1,1 %[fx:w+4],%[fx:h+4] '"$_ROUNDED_CORNER_"','"$_ROUNDED_CORNER_"''\
            info: > $_SCREENSHOT_DIR_/_rounded_.mvg
        check

        magick convert "$_LATEST_IMAGE_" -border $_BORDER_SIZE_ -alpha transparent \
            -background none -fill white -stroke none -strokewidth 0 \
            -draw "@"$_SCREENSHOT_DIR_"/_rounded_.mvg" $_SCREENSHOT_DIR_/_rounded_mask_.png >> $_LOG_FILE_ 2>&1
        check

        magick convert "$_LATEST_IMAGE_" -border $_BORDER_SIZE_ -alpha transparent \
            -background none -fill none -stroke $_FG_COLOR_ -strokewidth $_BORDER_SIZE_ \
            -draw "@"$_SCREENSHOT_DIR_"/_rounded_.mvg" $_SCREENSHOT_DIR_/_rounded_overlay_.png >> $_LOG_FILE_ 2>&1
        check

        magick convert "$_LATEST_IMAGE_" -alpha set -bordercolor none -border $_BORDER_SIZE_  \
            $_SCREENSHOT_DIR_/_rounded_mask_.png -compose DstIn -composite \
            $_SCREENSHOT_DIR_/_rounded_overlay_.png -compose Over -composite \
            "$_target_file_" >> $_LOG_FILE_ 2>&1 && \
        rm -f $_SCREENSHOT_DIR_/_rounded_*
        check
    else
        magick convert "$_LATEST_IMAGE_" \( +clone  -alpha extract -draw 'fill black polygon 0,0 0,'"$_ROUNDED_CORNER_"' '"$_ROUNDED_CORNER_"',0 fill white circle '"$_ROUNDED_CORNER_"','"$_ROUNDED_CORNER_"' '"$_ROUNDED_CORNER_"',0' \
        \( +clone -flip \) -compose Multiply -composite \
        \( +clone -flop \) -compose Multiply -composite \
        \) -alpha off -compose CopyOpacity -composite -compose over "$_target_file_" >> $_LOG_FILE_ 2>&1
        check
    fi

    magick convert "$_target_file_" \( +clone -background black -shadow $_SHADOW_SIZE_ \) +swap -background none -layers merge +repage "$_target_file_" >> $_LOG_FILE_ 2>&1 \
    && magick convert "$_target_file_" -bordercolor $_BG_COLOR_ -border $_BG_SIZE_ "$_target_file_" >> $_LOG_FILE_ 2>&1
    check

    echo -en "  $_AUTHOR_NAME_  " | magick convert "$_target_file_" -gravity ${_AUTHOR_POST_[0]} -pointsize $_FONT_SIZE_ -fill $_AUTHOR_COLOR_ -undercolor $_FG_COLOR_ -font $_FONT_ -annotate ${_AUTHOR_POST_[1]} @- "$_target_file_" \
    >> $_LOG_FILE_ 2>&1 && magick convert "$_target_file_" -gravity South -chop 0x$(( $_BG_SIZE_ / 2 )) "$_target_file_" >> $_LOG_FILE_ 2>&1
    check

    magick convert "$_target_file_" -gravity North -background $_BG_COLOR_ -splice 0x$(( $_BG_SIZE_ / 2 )) "$_target_file_" >> $_LOG_FILE_ 2>&1
    check

    magick convert "$_target_file_" -profile /usr/share/color/icc/colord/sRGB.icc "$_target_file_" >> $_LOG_FILE_ 2>&1
    check

}

function summary() {

    if [[ $3 == "failed" ]]; then
        exit 1
    fi

    xclip -selection clipboard -t image/png -i $_target_file_ >> $_LOG_FILE_ 2>&1 && notify-send -u normal -t 3000 "Awesome-Flameshot: $_target_file_ Copied" >> $_LOG_FILE_ 2>&1

}

function main() {

    rm -f $_LOG_FILE_

    flameshot gui --raw > $_SCREENSHOT_DIR_/$_RAW_
    check

    get_latest_img

    convert

    summary

}

clear
main
